package yinzhi.micro_client.network;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.entity.StringEntity;

import yinzhi.micro_client.network.constants.INetworkConstants;
import yinzhi.micro_client.utils.MD5Util;

import com.alibaba.fastjson.JSON;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;

/**
 * Created by LIXUYU on 16/2/19.
 */
public class YZNetworkUtils implements INetworkConstants {
	public static HttpUtils http = new HttpUtils();
	public static Map<String, Object> paramMap = new HashMap<String, Object>();

	/**
	 * 获取轮播信息
	 * 
	 * @param logonToken
	 *            令牌(非必须)
	 * @param deviceId
	 *            设备标识（非必须）
	 * @param callBack
	 */
	public static void fetchSlideList(String logonToken, String deviceId, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");

		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}
		if (deviceId != null) {
			params.addBodyParameter("deviceId", deviceId);
		}
		http.send(HttpRequest.HttpMethod.GET, API_COURSE_SLIDELIST, params, callBack);

	}

	/**
	 * 获取首页推荐视频(人气)
	 * 
	 * @param callBack
	 */
	public static void fetchHotRecommendCourse(RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");
		http.send(HttpRequest.HttpMethod.GET, API_COURSE_HOTRECOMMEND, params, callBack);
	}

	/**
	 * 获取首页推荐视频(免费)
	 * 
	 * @param callBack
	 */
	public static void fetchFreeRecommendCourse(RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");
		http.send(HttpRequest.HttpMethod.GET, API_COURSE_FREERECOMMEND, params, callBack);
	}

	/**
	 * 获取免费排行榜列表
	 * 
	 * @param logonToken
	 *            令牌(非必须)
	 * @param deviceId
	 *            设备标识（非必须）
	 * @param page
	 *            页码
	 * @param size
	 *            一页的数量
	 * @param callBack
	 */
	public static void fetchFreeRankingList(String logonToken, String deviceId, Integer page, Integer size,
			RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");
		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}
		if (deviceId != null) {
			params.addBodyParameter("deviceId", deviceId);
		}
		params.addBodyParameter("page", page.toString());
		params.addBodyParameter("size", size.toString());
		http.send(HttpRequest.HttpMethod.GET, API_COURSE_FREERANKINGLIST, params, callBack);
	}

	/**
	 * 获取人气排行榜列表
	 * 
	 * @param logonToken
	 *            令牌(非必须)
	 * @param deviceId
	 *            设备标识（非必须）
	 * @param page
	 *            页码
	 * @param size
	 *            一页的数量
	 * @param callBack
	 */
	public static void fetchHotRankingList(String logonToken, String deviceId, Integer page, Integer size,
			RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");
		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}
		if (deviceId != null) {
			params.addBodyParameter("deviceId", deviceId);
		}
		params.addBodyParameter("page", page.toString());
		params.addBodyParameter("size", size.toString());
		http.send(HttpRequest.HttpMethod.GET, API_COURSE_HOTRANKINGLIST, params, callBack);
	}

	/**
	 * 搜索
	 * 
	 * @param keyWord
	 * @param logonToken
	 * @param page
	 * @param size
	 * @param callBack
	 */
	public static void courseSearch(String keyWord, String logonToken, Integer page, Integer size,
			RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();
		paramMap.put("keyWord", keyWord);
		paramMap.put("page", page);
		paramMap.put("size", size);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}
		http.send(HttpRequest.HttpMethod.POST, API_COURSE_SEARCH, params, callBack);
	}

	/**
	 * 请求课程详细信息
	 * 
	 * @param logonToken
	 * @param courseId
	 * @param callBack
	 */
	public static void courseDetail(String logonToken, String courseId, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();
		paramMap.put("courseId", courseId);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}

		http.send(HttpRequest.HttpMethod.POST, API_COURSE_DETAIL, params, callBack);
	}

	/**
	 * 请求课程目录
	 * 
	 * @param logonToken
	 * @param courseId
	 * @param callBack
	 */
	public static void courseCatalog(String logonToken, String courseId, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();
		paramMap.put("courseId", courseId);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}

		http.send(HttpRequest.HttpMethod.POST, API_COURSE_CATALOG, params, callBack);
	}

	/**
	 * 请求练习
	 * 
	 * @param itemResourceId
	 * @param logonToken
	 * @param callBack
	 */
	public static void fetchExercise(String logonToken, String itemResourceId, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();

		paramMap.put("itemResourceId", itemResourceId);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}
		params.addBodyParameter("itemResourceId", itemResourceId);
		http.send(HttpRequest.HttpMethod.POST, API_EXERCISE, params, callBack);
	}

	/**
	 * 记录练习情况
	 * 
	 * @param logonToken
	 * @param itemResourceId
	 * @param userChoice
	 * @param isTrue
	 * @param callBack
	 */
	public static void exerciseRecord(String logonToken, String itemResourceId, String userChoice, String isTrue,
			RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader(LOGON_TOKEN, logonToken);
		params.addBodyParameter("itemResourceId", itemResourceId);
		params.addBodyParameter("userChoice", userChoice);
		params.addBodyParameter("isTrue", isTrue);
		http.send(HttpRequest.HttpMethod.POST, API_EXERCISE, params, callBack);
	}

	/**
	 * 请求小贴士
	 * 
	 * @param itemResourceId
	 * @param logonToken
	 * @param callBack
	 */
	public static void fetchCourseTips(String logonToken, String itemResourceId, RequestCallBack<String> callBack) {

		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();

		paramMap.put("itemResourceId", itemResourceId);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}

		http.send(HttpRequest.HttpMethod.POST, API_EXERCISE, params, callBack);
	}

	/**
	 * 请求视频
	 * 
	 * @param itemResourceId
	 * @param token
	 * @param callBack
	 */
	public static void fetchVideo(String itemResourceId, String logonToken, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();

		paramMap.put("itemResourceId", itemResourceId);

		if (logonToken != null) {
			paramMap.put(LOGON_TOKEN, logonToken);
		}

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		http.send(HttpRequest.HttpMethod.POST, API_VIDEO, params, callBack);
	}

	/**
	 * 获取评论列表
	 * 
	 * @param bookId
	 * @param page
	 * @param callBack
	 */
	public static void fetchCommentList(String logonToken, String itemResourceId, Integer page, Integer size,
			RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");
		paramMap.clear();

		paramMap.put("itemResourceId", itemResourceId);
		paramMap.put("page", page);
		paramMap.put("size", size);
		if (logonToken != null) {
			params.addHeader(LOGON_TOKEN, logonToken);
		}

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		http.send(HttpRequest.HttpMethod.POST, API_COMMENT_LIST, params, callBack);
	}

	/**
	 * 发表评论
	 * 
	 * @param token
	 * @param callBack
	 */
	public static void publishComment(String token, String content, String itemResourceId,
			RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");
		paramMap.clear();

		paramMap.put("content", content);
		paramMap.put("itemResourceId", itemResourceId);

		params.addHeader(LOGON_TOKEN, token);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		http.send(HttpRequest.HttpMethod.POST, API_COMMENT_PUBLISH, params, callBack);
	}

	/**
	 * 发表评分
	 * 
	 * @param token
	 * @param callBack
	 */
	public static void markScore(String token, String score, String itemResourceId, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");
		paramMap.clear();

		paramMap.put("score", score);
		paramMap.put("itemResourceId", itemResourceId);

		params.addHeader(LOGON_TOKEN, token);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		http.send(HttpRequest.HttpMethod.POST, API_SCORE_MARK, params, callBack);
	}

	/**
	 * 获取用户对该资源的评分
	 * 
	 * @param token
	 * @param callBack
	 */
	public static void fetchPersonalScore(String token, String itemResourceId, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");
		paramMap.clear();

		paramMap.put("itemResourceId", itemResourceId);

		params.addHeader(LOGON_TOKEN, token);

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		http.send(HttpRequest.HttpMethod.POST, API_SCORE_PERSONAL, params, callBack);
	}

	/**
	 * 请求分类信息
	 * 
	 * @param callBack
	 */
	public static void fetchClassifyList(RequestCallBack<String> callBack) {
		http.send(HttpRequest.HttpMethod.POST, API_CLASSIFY_LIST, null, callBack);
	}

	/**
	 * 请求某分类课程
	 * 
	 * @param callBack
	 */
	public static void fetchListByClassify(String classifyId, RequestCallBack<String> callBack) {
		RequestParams param = new RequestParams();
		param.addBodyParameter("classifyId", classifyId);
		http.send(HttpRequest.HttpMethod.POST, API_CLASSIFY_LISTBYCLASSIFY, null, callBack);
	}

	/**
	 * 我的订阅列表
	 * 
	 * @param token
	 * @param callBack
	 */
	public static void fetchMyCourseList(String token, RequestCallBack<String> callBack) {
		RequestParams param = new RequestParams();
		param.addBodyParameter(LOGON_TOKEN, token);
		http.send(HttpRequest.HttpMethod.POST, API_USER_COURSELIST, null, callBack);
	}

	/**
	 * 用户登录
	 * 
	 * @param deviceId
	 * @param username
	 * @param password
	 * @param callBack
	 */
	public static void doLogin(String deviceId, String username, String password, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();

		if (deviceId != null) {
			paramMap.put("deviceId", deviceId);
		}
		paramMap.put("username", username);
		paramMap.put("password", MD5Util.MD5(password));

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		http.send(HttpRequest.HttpMethod.POST, API_USER_LOGIN, params, callBack);

	}

	/**
	 * 用户注册
	 * 
	 * @param username
	 * @param password
	 * @param deviceId
	 * @param callBack
	 */
	public static void doRegister(String username, String password, String deviceId, String nickname,
			RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();

		params.addHeader("Content-Type", "application/json;charset=utf-8");

		paramMap.clear();

		paramMap.put("username", username);
		paramMap.put("nickname", nickname);
		paramMap.put("password", password);

		if (deviceId != null) {
			paramMap.put("deviceId", deviceId);
		}

		try {
			params.setBodyEntity(new StringEntity(JSON.toJSONString(paramMap)));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		http.send(HttpRequest.HttpMethod.POST, API_USER_REGISTER, params, callBack);
	}

	/**
	 * 验证用户名唯一性
	 * 
	 * @param username
	 * @param callBack
	 */
	public static void verifyUsername(String username, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addBodyParameter("username", username);
		http.send(HttpMethod.POST, API_USER_VERIFYUSERNAME, callBack);
	}

	/**
	 * 修改昵称
	 * 
	 * @param nickname
	 * @param logonToken
	 * @param callBack
	 */
	public static void modifyNickname(String nickname, String logonToken, RequestCallBack<String> callBack) {
		RequestParams params = new RequestParams();
		params.addHeader(LOGON_TOKEN, logonToken);
		params.addBodyParameter("nickname", nickname);
		http.send(HttpMethod.POST, API_USER_MODIFYNICKNAME, callBack);
	}
}
